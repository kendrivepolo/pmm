// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tw.idv.ken.mymovies.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import tw.idv.ken.mymovies.model.MediaFile;

privileged aspect MediaFile_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager MediaFile.entityManager;
    
    public static final List<String> MediaFile.fieldNames4OrderClauseFilter = java.util.Arrays.asList("storage", "format");
    
    public static final EntityManager MediaFile.entityManager() {
        EntityManager em = new MediaFile().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long MediaFile.countMediaFiles() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MediaFile o", Long.class).getSingleResult();
    }
    
    public static List<MediaFile> MediaFile.findAllMediaFiles() {
        return entityManager().createQuery("SELECT o FROM MediaFile o", MediaFile.class).getResultList();
    }
    
    public static List<MediaFile> MediaFile.findAllMediaFiles(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM MediaFile o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, MediaFile.class).getResultList();
    }
    
    public static MediaFile MediaFile.findMediaFile(Long id) {
        if (id == null) return null;
        return entityManager().find(MediaFile.class, id);
    }
    
    public static List<MediaFile> MediaFile.findMediaFileEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MediaFile o", MediaFile.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<MediaFile> MediaFile.findMediaFileEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM MediaFile o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, MediaFile.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void MediaFile.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void MediaFile.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            MediaFile attached = MediaFile.findMediaFile(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void MediaFile.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void MediaFile.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public MediaFile MediaFile.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MediaFile merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
