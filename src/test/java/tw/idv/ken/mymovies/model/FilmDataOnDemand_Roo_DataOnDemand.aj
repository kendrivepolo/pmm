// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tw.idv.ken.mymovies.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import tw.idv.ken.mymovies.model.Film;
import tw.idv.ken.mymovies.model.FilmDataOnDemand;
import tw.idv.ken.mymovies.model.OwnerDataOnDemand;
import tw.idv.ken.mymovies.model.Rating;
import tw.idv.ken.mymovies.model.StudioDataOnDemand;

privileged aspect FilmDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FilmDataOnDemand: @Component;
    
    private Random FilmDataOnDemand.rnd = new SecureRandom();
    
    private List<Film> FilmDataOnDemand.data;
    
    @Autowired
    OwnerDataOnDemand FilmDataOnDemand.ownerDataOnDemand;
    
    @Autowired
    StudioDataOnDemand FilmDataOnDemand.studioDataOnDemand;
    
    public Film FilmDataOnDemand.getNewTransientFilm(int index) {
        Film obj = new Film();
        setComment(obj, index);
        setDescription(obj, index);
        setPerformers(obj, index);
        setRating(obj, index);
        setStreetDate(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void FilmDataOnDemand.setComment(Film obj, int index) {
        String comment = "comment_" + index;
        if (comment.length() > 32768) {
            comment = comment.substring(0, 32768);
        }
        obj.setComment(comment);
    }
    
    public void FilmDataOnDemand.setDescription(Film obj, int index) {
        String description = "description_" + index;
        if (description.length() > 32768) {
            description = description.substring(0, 32768);
        }
        obj.setDescription(description);
    }
    
    public void FilmDataOnDemand.setPerformers(Film obj, int index) {
        String performers = "performers_" + index;
        if (performers.length() > 1024) {
            performers = performers.substring(0, 1024);
        }
        obj.setPerformers(performers);
    }
    
    public void FilmDataOnDemand.setRating(Film obj, int index) {
        Rating rating = Rating.class.getEnumConstants()[0];
        obj.setRating(rating);
    }
    
    public void FilmDataOnDemand.setStreetDate(Film obj, int index) {
        String streetDate = "streetDate_" + index;
        if (streetDate.length() > 255) {
            streetDate = streetDate.substring(0, 255);
        }
        obj.setStreetDate(streetDate);
    }
    
    public void FilmDataOnDemand.setTitle(Film obj, int index) {
        String title = "title_" + index;
        if (title.length() > 255) {
            title = title.substring(0, 255);
        }
        obj.setTitle(title);
    }
    
    public Film FilmDataOnDemand.getSpecificFilm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Film obj = data.get(index);
        Long id = obj.getId();
        return Film.findFilm(id);
    }
    
    public Film FilmDataOnDemand.getRandomFilm() {
        init();
        Film obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Film.findFilm(id);
    }
    
    public boolean FilmDataOnDemand.modifyFilm(Film obj) {
        return false;
    }
    
    public void FilmDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Film.findFilmEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Film' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Film>();
        for (int i = 0; i < 10; i++) {
            Film obj = getNewTransientFilm(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
